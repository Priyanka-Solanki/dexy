from dexy.utils import file_exists
import dexy.plugin
import os
import shutil

class Reporter(dexy.plugin.Plugin):
    """
    Base class for types of reporter.
    """
    aliases = []
    __metaclass__ = dexy.plugin.PluginMeta

    _settings = {
            "default" : ("Whether to run this report by default. Should be False for reports with side effects.", True),
            "dir" : ("Top-level directory in which report will be stored", None),
            "run-on-failed-batch" : ("Whether to run if an error occurs while processing the dexy batch.", False),
            "readme-filename" : ("Name of README file.", "README"),
            "safety-filename" : ("Name of a file which will be created in generated dir, and checked before generated dir is removed.", ".dexy-generated"),
            }
    _UNSET = []

    def is_active(self):
        return True

    def key_for_log(self):
        return "reporter:%s" % self.aliases[0]

    def log_debug(self, message):
        self.wrapper.log.debug("%s: %s" % (self.key_for_log(), message))

    def log_info(self, message):
        self.wrapper.log.info("%s: %s" % (self.key_for_log(), message))

    def log_warn(self, message):
        self.wrapper.log.warn("%s: %s" % (self.key_for_log(), message))

    def create_reports_dir(self, reports_dir=None):
        if not reports_dir:
            reports_dir = self.setting('dir')

        if not reports_dir:
            return False

        self.remove_reports_dir(reports_dir, keep_empty_dir=True)

        safety_filepath = os.path.join(reports_dir, self.setting('safety-filename'))
        readme_filepath = os.path.join(reports_dir, self.setting('readme-filename'))

        if not file_exists(reports_dir):
            os.mkdir(reports_dir)

        with open(safety_filepath, "w") as f:
            f.write("""
            This directory was generated by the %s Dexy Reporter and
            may be deleted without notice.\n\n""" % self.__class__.__name__)
        with open(readme_filepath, "w") as f:
            f.write("""
            This directory was generated by the %s Dexy Reporter and
            may be deleted without notice.\n\n""" % self.__class__.__name__)

    def remove_reports_dir(self, reports_dir=None, keep_empty_dir=False):
        if not reports_dir:
            reports_dir = self.setting('dir')

        if not reports_dir:
            return False

        safety_filepath = os.path.join(reports_dir, self.setting('safety-filename'))

        if file_exists(reports_dir) and not file_exists(safety_filepath):
            raise Exception("Please remove directory %s, Dexy wants to put a report here but doesn't want to overwrite anything by accident." % os.path.abspath(reports_dir))
        elif file_exists(reports_dir):
            if keep_empty_dir:
                # Does not remove the base directory, useful if you are running
                # a process (like 'dexy serve') from inside that directory
                for f in os.listdir(reports_dir):
                    path = os.path.join(reports_dir, f)
                    if os.path.isdir(path):
                        shutil.rmtree(path)
                    else:
                        os.remove(path)
            else:
                shutil.rmtree(reports_dir)

    def run(self, wrapper):
        pass
